// Snippet: 01_prefs_helper.dart
// Cole em: lib/services/preferences_keys.dart e lib/services/shared_preferences_services.dart

// preferences_keys.dart -> adicionar as chaves
class PreferencesKeys {
  static const String onboardingCompleted = 'onboarding_completed';
  static const String marketingConsent = 'marketing_consent';
  static const String lastPolicyRead = 'last_policy_read';
  static const String lastPolicyReadTimestamp = 'last_policy_read_timestamp';
  static const String privacyPolicyAllRead = 'privacy_policy_all_read';
  static const String termsOfUseAllRead = 'terms_of_use_all_read';

  // Adicione estas duas chaves para armazenar dados mínimos do usuário
  static const String userName = 'user_name';
  static const String userEmail = 'user_email';
}

// shared_preferences_services.dart -> helpers (exemplo resumido)
import 'package:shared_preferences/shared_preferences.dart';

class SharedPreferencesService {
  final SharedPreferences _prefs;
  SharedPreferencesService._(this._prefs);
  static SharedPreferencesService? _instance;

  static Future<SharedPreferencesService> getInstance() async {
    if (_instance != null) return _instance!;
    final prefs = await SharedPreferences.getInstance();
    _instance = SharedPreferencesService._(prefs);
    return _instance!;
  }

  // Helpers para userName
  static Future<void> setUserName(String name) async {
    if (_instance == null) await getInstance();
    await _instance!._prefs.setString(PreferencesKeys.userName, name);
  }

  static Future<String?> getUserName() async {
    if (_instance == null) await getInstance();
    return _instance!._prefs.getString(PreferencesKeys.userName);
  }

  static Future<void> removeUserName() async {
    if (_instance == null) await getInstance();
    await _instance!._prefs.remove(PreferencesKeys.userName);
  }

  // Helpers para userEmail
  static Future<void> setUserEmail(String email) async {
    if (_instance == null) await getInstance();
    await _instance!._prefs.setString(PreferencesKeys.userEmail, email);
  }

  static Future<String?> getUserEmail() async {
    if (_instance == null) await getInstance();
    return _instance!._prefs.getString(PreferencesKeys.userEmail);
  }

  static Future<void> removeUserEmail() async {
    if (_instance == null) await getInstance();
    await _instance!._prefs.remove(PreferencesKeys.userEmail);
  }

  // Revogar consentimento de marketing (remove apenas a chave específica)
  static Future<void> revokeMarketingConsent() async {
    if (_instance == null) await getInstance();
    await _instance!._prefs.remove(PreferencesKeys.marketingConsent);
  }

  // Test helper
  static void resetForTests() { _instance = null; }
}
